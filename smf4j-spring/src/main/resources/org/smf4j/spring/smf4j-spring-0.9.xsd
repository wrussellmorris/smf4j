<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2012 Russell Morris (wrussellmorris@gmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<xsd:schema xmlns="http://www.smf4j.org/schema/spring/smf4j"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:beans="http://www.springframework.org/schema/beans"
            targetNamespace="http://www.smf4j.org/schema/spring/smf4j"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.springframework.org/schema/beans"/>

    <xsd:element name="registrar" type="registrar-type">
        <xsd:annotation>
            <xsd:documentation>
                <![CDATA[
    Defines a set of nodes and accumulators and/or calculators which exist in
    the singleton application Registrar.
                ]]>
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="node-template" type="node-template-type">
        <xsd:annotation>
            <xsd:documentation>
                <![CDATA[
    Defines a node template that can be used to build other <node-templates> or
    referenced to create concrete nodes in a <registrar>.
                ]]>
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="resolve" type="resolve-type">
        <xsd:annotation>
            <xsd:documentation>
                <![CDATA[
    Resolves an accumulator from the singleton application Registrar.  This tag
    should be used to inject accumulators into beans.
                ]]>
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="csv-export" type="csv-export-type">
        <xsd:annotation>
            <xsd:documentation>
                <![CDATA[
    Defines a bean that will create a CSV file that exports the values of
    matched accumulators and calculators into a delimited text file.
                ]]>
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="file-enabler" type="file-enabler-type">
        <xsd:annotation>
            <xsd:documentation>
                <![CDATA[
    Defines a bean that will automatically enable nodes in the singleton
    application Registrar based on data in one or more properties files.
                ]]>
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="jmx-export" type="jmx-export-type">
        <xsd:annotation>
            <xsd:documentation>
                <![CDATA[
    Defines a bean that will automatically export matched nodes from the
    singleton application Registrar into the default JMX server.
                ]]>
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="registrar-type">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element name="node" type="node-type" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                        <xsd:documentation>
                            <![CDATA[
    Defines a node, as well as its accumulators, calculators, and any child
    nodes.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="node-template" type="node-template-ref-type" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                        <xsd:documentation>
                            <![CDATA[
    Defines a node by copying a given <node-template>, and possibly renaming it.
                            ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    <![CDATA[
    Names this <registrar> so that other interested nodes can depend on it,
    thereby ensuring that this <registrar>'s changes have been pushed to the
    singleton application Registrar before they attempt to use them.

    If there is only one <registrar> in an application's configuration, you can
    leave this id undefined, and a pre-defined id value will be used
    automatically.  If there are more than one <registrar> in an
    application's configuration, each MUST be given unique a unique 'id'.

    This forces certain patterns to be followed in any elements that are built
    to query or export the contents of the singleton application Registrar.  If
    there is only 1 <registrar>, and it has no 'id', these elements MUST leave
    their 'depends-on' attribute empty.  If there are more than 1 <registrar> in
    the application's context, then these elements MUST use their 'depends-on'
    attribute to indicate which <registrar> instances produce nodes that they
    depend on.

    For instance, if there is only 1 <registrar>, and it has no 'id', then the
    <resolve> element could be written as:

        <resolve path="some.node:an_accumulator" />

    If there are 2 or more <registrar>'s with 'id's 'registrar-1' and
    'registrar-2', and the <resolve> element was attempting to resolve a node
    and accumulator defined as part of 'registrar-2', then the <resolve> element
    would be written as:

        <resolve path="some.node:an_accumulator" depends-on="registrar-2" />
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:attributeGroup name="acc-or-calc-attributes">
        <xsd:attribute name="name" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    <![CDATA[
    The name of an accumulator or a calculator in a node.  The name must match
    the pattern '[a-zA-Z0-9_]+', and MUST uniquely identify this calculator or
    accumulator among all other calculators or accumulators in its node.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:pattern value="[\w_]+" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="units" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    <![CDATA[
    The units represented by the count of this accumulator or simple
    calculator.

    This value is ignored for compound calculators whose calculate() methods
    return user defined types.  Instead, each readable bean property X
    (discovered by introspection of a method getX() or isX() can be decorated
    with a org.smf4j.helpers.Units annotation.

    In either case, it is not guaranteed that this units value will be paid
    attention to by any particular exporter.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="node-name-attribute">
        <xsd:attribute name="name" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    <![CDATA[
    The name of a <node> or <node-template>, which must match the pattern
    [a-zA-Z0-9_\.]+ .
                    ]]>
                </xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:pattern value="[\w_]+(\.[\w_]+)*" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:complexType name="node-type" >
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <!-- Embedded node and node template refs -->
                <xsd:element name="node" type="node-type">
                    <xsd:annotation>
                        <xsd:documentation>
                    <![CDATA[
    Defines a child node.
                    ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="node-template" type="node-template-ref-type">
                    <xsd:annotation>
                        <xsd:documentation>
                    <![CDATA[
    Defines a child node by copying an existing <node-template>.  If a
    'name' attribute is specified, then the copied node will have that name.  If
    a 'name' attribute is not specified, then the copied node will keep the
    name it was assigned in its <node-template> definition.
                    ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>

                <!-- Core Accumulators -->
                <xsd:element name="counter" type="core-accumulator-type">
                    <xsd:annotation>
                        <xsd:documentation>
                    <![CDATA[
    Defines an accumulator which reports the sum of the numbers it has
    been shown.
                    ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="min" type="core-accumulator-type">
                    <xsd:annotation>
                        <xsd:documentation>
                    <![CDATA[
    Defines an accumulator which reports the smallest of the numbers it has
    been shown.
                    ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="max" type="core-accumulator-type">
                    <xsd:annotation>
                        <xsd:documentation>
                    <![CDATA[
    Defines an accumulator which reports the largest of the numbers it has
    been shown.
                    ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>

                <!-- Core Calculators -->
                <xsd:element name="normalize" type="core-normalize-type">
                    <xsd:annotation>
                        <xsd:documentation>
                    <![CDATA[
    Defines a simple calculator that normalizes the value of an accumulator
    to a specified frequency.  This calculator is intended to normalize
    accumulators whose duration='windowed'.  If the attached accumulator is not
    duration='windowed', it's value is returned without modification.

    This calculator exists principally to easily massage the value reported by a
    'counter' accumulator with duration='windowed' and
    intervals-type='powers-of-two' into a much more easily understandable
    per-millisecond/per-second/per-minute/etc... value instead of its native
    per-2^n-nanoseconds value.
                    ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="ratio" type="core-ratio-type">
                    <xsd:annotation>
                        <xsd:documentation>
                    <![CDATA[
    Defines a simple calculator that returns the ratio of two accumulators.
                    ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="range-group" type="core-range-group-type">
                    <xsd:annotation>
                        <xsd:documentation>
                    <![CDATA[
    Defines simple calculator that returns a string representing the
    value of the given accumulator in units of the 'range' it best fits.

    If units='B', ranges='1000,1000000', groups='KB,MB', and threshold='0.85'
    then the returned value would be as follows:

        1      -> '1B'
        500    -> '500B'
        900    -> '0.90KB'
        5000   -> '5.00KB'
        900000 -> '0.90MB'
                    ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>

                <!-- Random Beans -->
                <xsd:element name="custom" type="custom-type">
                    <xsd:annotation>
                        <xsd:documentation>
                    <![CDATA[
    Used to pull in a user-defined bean that implements either
    org.smf4j.Accumulator or org.smf4j.Calculator.
                    ]]>
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attributeGroup ref="node-name-attribute" />
    </xsd:complexType>

    <xsd:complexType name="node-template-type">
        <xsd:complexContent>
            <xsd:extension base="node-type">
                <xsd:attribute name="id" type="xsd:ID" use="required" />
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="node-template-ref-type">
        <xsd:attribute name="ref" type="xsd:string" use="required" />
        <xsd:attribute name="name" type="xsd:string" use="optional" />
    </xsd:complexType>

    <xsd:complexType name="core-accumulator-type" >
        <xsd:attributeGroup ref="acc-or-calc-attributes" />
        <xsd:attribute name="contention" use="optional" default="high">
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="high" />
                    <xsd:enumeration value="low" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="duration" use="optional" default="unbounded">
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="unbounded" />
                    <xsd:enumeration value="windowed" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="time-window" type="xsd:integer" use="optional" />
        <xsd:attribute name="intervals" type="xsd:integer" use="optional" />
        <xsd:attribute name="intervals-type" use="optional" default="seconds" >
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="seconds" />
                    <xsd:enumeration value="nanos-powers-of-2" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="time-reporter" type="xsd:string" use="optional" />
    </xsd:complexType>

    <xsd:complexType name="custom-type">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="1">
                <xsd:element ref="beans:bean"/>
                <xsd:element ref="beans:ref"/>
                <xsd:element ref="beans:idref"/>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attributeGroup ref="acc-or-calc-attributes" />
        <xsd:attribute name="ref" type="xsd:string" />
    </xsd:complexType>

    <xsd:complexType name="core-normalize-type" >
        <xsd:attributeGroup ref="acc-or-calc-attributes" />
        <xsd:attribute name="accumulator" type="xsd:string" use="required" />
        <xsd:attribute name="frequency" type="core-frequency-type" use="optional" default="seconds" />
    </xsd:complexType>

    <xsd:complexType name="core-ratio-type" >
        <xsd:attributeGroup ref="acc-or-calc-attributes" />
        <xsd:attribute name="numerator" type="xsd:string" use="required" />
        <xsd:attribute name="denominator" type="xsd:string" use="required" />
    </xsd:complexType>

    <xsd:complexType name="core-range-group-type" >
        <xsd:attributeGroup ref="acc-or-calc-attributes" />
        <xsd:attribute name="accumulator" type="xsd:string" use="required" />
        <xsd:attribute name="ranges" type="xsd:string" use="optional" />
        <xsd:attribute name="suffixes" type="xsd:string" use="optional" />
        <xsd:attribute name="threshold" use="optional" default="0.85" >
            <xsd:simpleType>
                <xsd:restriction base="xsd:decimal">
                    <xsd:maxInclusive value="1.0" />
                    <xsd:minExclusive value="0.0" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="normalize" type="xsd:boolean" use="optional" />
        <xsd:attribute name="frequency" type="core-frequency-type" use="optional" default="seconds" />
        <xsd:attribute name="format" type="xsd:string" use="optional" />
    </xsd:complexType>

    <xsd:simpleType name="core-frequency-type">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="nanos" />
            <xsd:enumeration value="micros" />
            <xsd:enumeration value="millis" />
            <xsd:enumeration value="seconds" />
            <xsd:enumeration value="minutes" />
            <xsd:enumeration value="hours" />
            <xsd:enumeration value="days" />
            <xsd:enumeration value="weeks" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="csv-export-type">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element name="filter">
                    <xsd:complexType>
                        <xsd:attribute name="value" type="xsd:string" use="required" />
                    </xsd:complexType>
                </xsd:element>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:ID" use="required" />
        <xsd:attribute name="path" type="xsd:string" use="required" />
        <xsd:attribute name="timestampColumn" type="xsd:boolean" use="optional" />
        <xsd:attribute name="timestampColumnHeader" type="xsd:string" use="optional" />
        <xsd:attribute name="rolloverTimestampPattern" type="xsd:string" use="optional" />
        <xsd:attribute name="columnTimestampPattern" type="xsd:string" use="optional" />
        <xsd:attribute name="lineEnding" use="optional" >
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:enumeration value="system" />
                    <xsd:enumeration value="cr" />
                    <xsd:enumeration value="lf" />
                    <xsd:enumeration value="crlf" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="append" type="xsd:boolean" use="optional" />
        <xsd:attribute name="delimeter" use="optional">
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:minLength value="1" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="quote" use="optional" >
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:minLength value="1" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="charset" type="xsd:string" use="optional" />
        <xsd:attribute name="maxSize" use="optional">
            <xsd:simpleType>
                <xsd:restriction base="xsd:integer">
                    <xsd:minInclusive value="0" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="depends-on" type="xsd:string" use="optional" />
    </xsd:complexType>

    <xsd:complexType name="resolve-type">
        <xsd:attribute name="path" use="required">
            <xsd:simpleType>
                <xsd:restriction base="xsd:string">
                    <xsd:pattern value="[a-zA-Z0-9\-_\.]+:[a-zA-Z0-9\-_]+" />
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="depends-on" type="xsd:string" use="optional" />
    </xsd:complexType>

    <xsd:complexType name="file-enabler-type">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element name="path">
                    <xsd:complexType>
                        <xsd:attribute name="value" type="file-enabler-path-type" use="required" />
                    </xsd:complexType>
                </xsd:element>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="path" type="file-enabler-path-type" use="optional"/>
    </xsd:complexType>

    <xsd:simpleType name="file-enabler-path-type">
        <xsd:restriction base="xsd:string">
            <xsd:minLength value="1" />
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="jmx-export-type">
        <xsd:attribute name="id" type="xsd:ID" use="optional" />
        <xsd:attribute name="autopublish" type="xsd:boolean" use="optional" default="true" />
        <xsd:attribute name="depends-on" type="xsd:string" use="optional" />
    </xsd:complexType>
</xsd:schema>
